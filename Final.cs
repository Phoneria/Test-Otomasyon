/////////////////////////////////////////////////////////////////////////////////// 
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
///////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using System.Text.RegularExpressions;

namespace Travel
{
    public partial class Recording1
    {
        private void Init(){}
        
        private static string currentDirTemp = System.IO.Directory.GetCurrentDirectory();
        private static string currentDir = System.IO.Path.Combine(currentDirTemp, "Results");
        private static string saveToPNG = System.IO.Path.Combine(currentDir, "Screenshots");
        private static string accessibleElementsFilePath = System.IO.Path.Combine(currentDir, "AccessibleElements.txt");
        private static string namedElementsFilePath = System.IO.Path.Combine(currentDir, "NamedElements.txt");
        private static string saveToTXT = System.IO.Path.Combine(currentDir, "AllElementsFilePath.txt");
        private static Travel.TravelRepository myRepo = Travel.TravelRepository.Instance;        
        
        // Bu kod ana sayfaının XPath değerini çekiyor 
        public static string getBasePath()
        {
            try
            {
                string basePath = myRepo.Kardelen.BasePath.ToString();
                return basePath;
            }
            catch (Exception ex)
            {
                Report.Error($"Failed to get paths {ex}");
                return string.Empty;
            }
        }
        
        public static IList<Unknown> getUIElements(string basePath)
        {
            try  
            {
                IList<Unknown> elements = Host.Local.Find<Unknown>(basePath + "//*");
                Report.Log(ReportLevel.Info, $"Found {elements.Count} UI elements.");
                return elements;
            }
            catch(Exception ex)
            {
                Report.Error($"Failed to find UI elements: {ex.Message}");
                return null;
            }
        }
        
        public static void reportUIElement(Element element)
        {
            try
            {
                Console.WriteLine(element.ToString());
                Report.Log(ReportLevel.Info, $"{element.ToString()}");
            }
            catch(Exception ex)
            {
                Report.Error($"Failed to report UI element: {ex.Message}");
            }
        }
        
        // Ensure directory exists before creating/clearing file
        public static void ensureDirectoryExists(string filePath)
        {
            try
            {
                string directoryPath = Path.GetDirectoryName(filePath);
                if (!string.IsNullOrEmpty(directoryPath) && !Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                    Report.Log(ReportLevel.Info, $"Created directory: {directoryPath}");
                }
            }
            catch (Exception ex)
            {
                Report.Error($"Error creating directory: {ex.Message}");
            }
        }
        
        // Fixed function to clear TXT file with proper directory creation
        public static void clearTXTFile(string txtPath)
        {
            try
            {
                // Ensure the directory exists first
                ensureDirectoryExists(txtPath);
                
                // Create or clear the file
                using (StreamWriter writer = new StreamWriter(txtPath, false))
                {
                    // Creates an empty file or clears existing content
                }
                
                Report.Log(ReportLevel.Info, $"TXT file cleared: {txtPath}");
            }
            catch (Exception ex)
            {
                Report.Error($"Error while clearing txt file: {ex.Message}");
            }
        }
        public static bool isValid(Unknown element){
        	if ( element.GetPath().ToString().Contains("/form[@name='tr-com-aselsan-kardelen-application-mainwindow']")){
        		return true;
        	}
        	return false;
        }
        
        // Write to TXT file with proper error handling
        public static void writeToTXT(string txtPath, Unknown element, bool append = true)
        {
            try
            {
                // Ensure directory exists before writing
                ensureDirectoryExists(txtPath);
                
                using (StreamWriter writer = new StreamWriter(txtPath, append)){
	                string elementPath = element.GetPath().ToString();
                    writer.WriteLine(elementPath);
	            }
                
            }
            catch (Exception ex)
            {
                Report.Error($"Error while writing to txt file: {ex.Message}");
            }
        }
        
        public static void captureImage(string saveToPNG, Unknown element, string fileName)
        {
            try
            {
                if (!element.Visible)
                {
                    Report.Warn($"Element {element} is not visible, skipping screenshot");
                    return;
                }
                
                // Ensure the screenshots directory exists
                if (!Directory.Exists(saveToPNG))
                {
                    Directory.CreateDirectory(saveToPNG);
                    Report.Log(ReportLevel.Info, $"Created screenshots directory: {saveToPNG}");
                }
                
                string savePath = Path.Combine(saveToPNG, fileName);
                
                // Capture and save the image
                var image = Imaging.CaptureImage(element.Element);
                image.Save(savePath);
                image.Dispose(); // Properly dispose the image to free memory
                
                Report.Log(ReportLevel.Info, $"Screenshot saved to: {savePath}");
                
            }
            catch (Exception ex)
            {
                Report.Error($"Error capturing image for element {fileName}: {ex.Message}");
            }
        }
        
        public static IList<Unknown> fetchMainXPaths(bool isReport = false, bool isWrite = true, bool isCapture = true)
        {
            Report.Log(ReportLevel.Info, "Fetching XPaths...");
            
            try
            {
                string basePath = getBasePath();
                if (string.IsNullOrEmpty(basePath))
                {
                    Report.Error("Base path is empty or null, cannot proceed");
                    return new List<Unknown>();
                }
                
                IList<Unknown> allUIElements = getUIElements(basePath);
                if (allUIElements == null || allUIElements.Count == 0)
                {
                    Report.Warn("No UI elements found");
                    return new List<Unknown>();
                }
                
                // Clear the file before starting to write
                if (isWrite)
                {
                    clearTXTFile(saveToTXT);
                    Report.Log(ReportLevel.Info, $"Starting to write {allUIElements.Count} elements to file.");
                }
                int counter = 1;
                // Process each element
                for (int i = 0; i < allUIElements.Count; i++)
                {
                    try
                    {
                        Unknown element = allUIElements[i];
                         
                        Report.Log(ReportLevel.Info, $"Processing element {i + 1}/{allUIElements.Count}: {element.ToString()}");
                        if (isValid(element)){
                        	
	                        if (isReport)
	                        {
	                            reportUIElement(element);
	                        }
	                        
	                        string elementPath = element.GetPath().ToString();
							string accessibleName = string.Empty;

							if (elementPath.Contains("@accessiblename="))
							{
							    Match m = Regex.Match(elementPath, @"@accessiblename\s*=\s*'([^']*)'");
							    if (m.Success)
							        accessibleName = m.Groups[1].Value;   // örn. "Open"
							}
							
								
	                        if (isWrite)
	                        {	       
	                        	if (accessibleName == string.Empty){
                        			writeToTXT(saveToTXT, element, true);
	                        	}
	                        	else{
                        			writeToTXT(namedElementsFilePath, element, true);
 
	                        	}
	                        }
	                        
	                        if (isCapture)
	                        {
	                        	if (accessibleName == string.Empty){
	                            	captureImage(saveToPNG, element, $"{counter ++}.png");
	                        	}
	                        	else{
	                            	captureImage(saveToPNG, element, $"{accessibleName}.png");
	                        	}
	                        	
	                        }
                        }
                    }
                    catch (Exception ex)
                    {
                        Report.Error($"Error processing element {i}: {ex.Message}");
                        // Continue with next element instead of stopping
                        continue;
                    }
                }
                
                if (isWrite)
                {
                    Report.Log(ReportLevel.Info, $"Finished writing {allUIElements.Count} elements to file: {saveToTXT}");
                }
                
                return allUIElements;
            }
            catch (Exception ex)
            {
                Report.Error($"Fatal error in fetchMainXPaths: {ex.Message}");
                return new List<Unknown>();
            }
        }
        
        public static void createDB()
        {
            try
            {
                Report.Log(ReportLevel.Info, "Starting database creation process...");
                var elements = fetchMainXPaths();
                Report.Log(ReportLevel.Info, $"Database creation completed. Processed {elements.Count} elements.");
            }
            catch (Exception ex)
            {
                Report.Error($"Error in createDB: {ex.Message}");
            }
        }
    }
}
