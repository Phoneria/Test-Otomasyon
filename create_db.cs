/////////////////////////////////////////////////////////////////////////////////// 
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
///////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CreateDB
{
    public partial class Recording1
    {
        private void Init(){}
        
        private static string saveToTXT = "C:\\Users\\Aselsan\\Desktop\\Izzet\\Elements.txt";
        private static string saveToPNG = "C:\\Users\\Aselsan\\Desktop\\Izzet\\CapturedImages";
        private static CreateDB.CreateDBRepository myRepo = CreateDB.CreateDBRepository.Instance;
        
        // Kodun çalışması için kısa bir kayıt alarak elementlerin tanınmasını sağlayın.
        
        // Bu kod ana sayfaının XPath değerini çekiyor 
        public static string getBasePath(){
            try{
                string basePath = myRepo.Kardelen.BasePath.ToString();
                return basePath;
            }
            catch (Exception ex){
                Report.Error($"Failed to get paths {ex}");
                return string.Empty;
            }
        }
        
        public static IList<Unknown> getUIElements(string basePath){
            try  {
                IList<Unknown> elements = Host.Local.Find<Unknown>(basePath + "//*");
                Report.Log(ReportLevel.Info, $"Found {elements.Count} UI elements.");
                return elements;
            }
            catch(Exception ex){
                Report.Error($"Failed to find UI elements: {ex.Message}");
                return null;
            }
        }
        
        public static void reportUIElement(Element element){
            try{
                Console.WriteLine(element.ToString());
                Report.Log(ReportLevel.Info, $"{element.ToString()}");
            }
            catch(Exception ex){
                Report.Error($"Failed to find UI elements: {ex.Message}");
            }
        }
        
        // Dosyayı temizlemek için yeni bir fonksiyon
        public static void clearTXTFile(string txtPath){
            try{
                // Dosyayı boşaltma
                using (StreamWriter writer = new StreamWriter(txtPath, false)){
                    // Boş bir dosya oluştur
                }
                Report.Log(ReportLevel.Info, $"TXT file cleared: {txtPath}");
            }
            catch (Exception ex){
                Report.Error($"Error while clearing txt file {ex}");
            }
        }
        
        // Dosyaya ekleme yapacak şekilde düzeltildi
        public static void writeToTXT(string txtPath, Unknown element, bool append = true){
            try{
                using (StreamWriter writer = new StreamWriter(txtPath, append)){
                    string elementPath = element.GetPath().ToString();
                    writer.WriteLine(elementPath);
                }
            }
            catch (Exception ex){
                Report.Error($"Error while writing txt file {ex}");
            }
        }
        
        public static void captureImage(string saveToPNG, Unknown element, string fileName){
            try{
                if(!element.Visible){
                    Report.Warn($"Element {element} is not visible");
                }
                
                if (!System.IO.Directory.Exists(saveToPNG)){
                    System.IO.Directory.CreateDirectory(saveToPNG);
                }
                
                string savePath = System.IO.Path.Combine(saveToPNG, fileName);
                
                Imaging.CaptureImage(element.Element).Save(savePath);
                Report.Log(ReportLevel.Info, $"Screenshot saved to : {savePath}");
                
            }catch (Exception ex){
                Report.Error($"General error writing txt file {ex}");
            }
        }
        
        public static IList<Unknown> fetchMainXPaths(bool isReport = false, bool isWrite = true, bool isCapture = true){
            Report.Log(ReportLevel.Info, $"Fetching XPaths...");
            
            string basePath = getBasePath();
            IList<Unknown> allUIElements = getUIElements(basePath);
            
            // İşleme başlamadan önce dosyayı temizle
            if (isWrite){
                clearTXTFile(saveToTXT);
                Report.Log(ReportLevel.Info, $"Starting to write {allUIElements.Count} elements to file.");
            }
            
            for (int i = 0; i < allUIElements.Count; i++){
                Element element = allUIElements[i];
                
                if (isReport){
                    reportUIElement(element);
                }
                
                if (isWrite){
                    // true parametresi ile ekleme modunda yazdır
                    writeToTXT(saveToTXT, element, true);
                }
                
                if (isCapture){
                    captureImage(saveToPNG, element, $"{i}.png");
                }
            }
            
            if (isWrite){
                Report.Log(ReportLevel.Info, $"Finished writing {allUIElements.Count} elements to file.");
            }
            
            return allUIElements;
        }
        
        public static void Main(){
            fetchMainXPaths();
        }
    }
}
